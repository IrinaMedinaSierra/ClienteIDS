**ClienteController.java**
package com.ceatformacion.clienteids.controller;


import com.ceatformacion.clienteids.model.Clientes;
import com.ceatformacion.clienteids.repository.ClienteRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class ClienteController {

    //creamos una llamada @Autowired  que permite que inyectar las dependencias del hibernate con la clase
    @Autowired
    private ClienteRepository clienteRepository;

    @GetMapping("/formulario")
    public String mostrarFormulario(Model model){
        model.addAttribute("cliente",new Clientes());
        return "formulario";
    }

    @PostMapping("/crud")
    public String guardarCliente(@ModelAttribute Clientes cliente){
        clienteRepository.save(cliente);
        return "redirect:/crud";
    }

    @GetMapping("/crud")
    public String mostrarCRUD(Model model){
        model.addAttribute("clientes",clienteRepository.findAll());
        return "crud";
    }
    @GetMapping("/editar/{id}")
    public String editar(@PathVariable int id, Model model){
        //buscar el bbdd ese id para poder editarlo
        Clientes cliente = clienteRepository.findById(id).get();
        model.addAttribute("cliente",cliente);
        return "formulario";
    }
    @GetMapping("/eliminar/{id}")
    public String eliminar(@PathVariable int id){
        clienteRepository.deleteById(id);
        return "redirect:/crud";
    }
}


//**Cliente.java

package com.ceatformacion.clienteids.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity //Declara que esta clase se relaciona con la BBDD
public class Clientes {
    //Identifique la clave principal de la entidad
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int idCliente;
    private String nombreC;
    private String apellidoC;
    private int edad;
    private String direccion;
    private String telefono;
    private String email;

    //constructor-> vacio! -> defecto..no lo tengo que crear....

    //getter y setter

    public int getIdCliente() {
        return idCliente;
    }

    public void setIdCliente(int idCliente) {
        this.idCliente = idCliente;
    }

    public String getNombreC() {
        return nombreC;
    }

    public void setNombreC(String nombreC) {
        this.nombreC = nombreC;
    }

    public String getApellidoC() {
        return apellidoC;
    }

    public void setApellidoC(String apellidoC) {
        this.apellidoC = apellidoC;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getTelefono() {
        return telefono;
    }

    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    //toString

    @Override
    public String toString() {
        return "Clientes{" +
                "idCliente=" + idCliente +
                ", nombreC='" + nombreC + '\'' +
                ", apellidoC='" + apellidoC + '\'' +
                ", edad=" + edad +
                ", direccion='" + direccion + '\'' +
                ", telefono='" + telefono + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}

//ClienteRepository.java

package com.ceatformacion.clienteids.repository;

import com.ceatformacion.clienteids.model.Clientes;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface ClienteRepository extends JpaRepository<Clientes,Integer> {// se debe llamar igual que la clase del repositorio al que que esta haciendo la llamada y el tipo dato de la clave principal en tipo objeto
}



//application.properties

spring.application.name=ClienteIDS
spring.datasource.url=jdbc:mariadb://localhost:3306/clientesids
spring.datasource.username=root
spring.datasource.password=
# permitir que Hibernate cree o actualize la Base de Datos con nuestra entidad -> con la clase cliente
spring.jpa.hibernate.ddl-auto=update
# necesito que me muestre las consultas que hace Hibernate en la consola para verificar o aprender
spring.jpa.show-sql=true
# dialecto-> sintaxis de sql en Hibernate y en nuestra aplicación
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


//crud.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Gestión de Clientes</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script>
</head>
<body class="container align-items-center">
<h1>Gestión de Clientes</h1>
<table class="table table-hover">
<tr>
    <th>#ID</th>
    <th>Nombre</th>
    <th>Apellido</th>
    <th>Edad</th>
    <th>Dirección</th>
    <th>Email</th>
    <th>Acciones</th>
</tr>
<tr th:each="cliente: ${clientes}">
    <td th:text="${cliente.getIdCliente()}"></td>
    <td th:text="${cliente.getNombreC()}"></td>
    <td th:text="${cliente.getApellidoC()}"></td>
    <td th:text="${cliente.getEdad()}"></td>
    <td th:text="${cliente.getDireccion()}"></td>
    <td th:text="${cliente.getEmail()}"></td>
    <td >
        <a th:href="@{'/editar/' + ${cliente.getIdCliente()}}" class="btn btn-warning">✔Editar</a>
        <a th:href="@{'/eliminar/' + ${cliente.getIdCliente()}}" class="btn btn-danger" onclick="return confirm('¿Seguro que deseas eliminar este Cliente');">❌Eliminar</a>
    </td>

</tr>
</table>
</body>
</html>


// formulario.html

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Datos del Cliente</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script>
</head>
<body>
<h1 class="text-center" th:text="${cliente.getIdCliente()==0?'Nuevo Cliente':'Editar Cliente'}"></h1>
<h1>Datos Personales</h1>
<form class="row g-3 needs-validation" novalidate th:action="@{/crud}" method="POST"  th:object="${cliente}">
<!--    De modo oculto, tomamos el id que se envia por el metodo GET-->
    <input type="hidden" th:field="*{idCliente}">
    <div class="col-md-4">
        <label for="validationCustom01" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="validationCustom01" required  th:field="*{nombreC}" >
        <div class="valid-feedback">
           ok!
        </div>
        <div class="invalid-feedback">
            Indica el Nombre
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationCustom02" class="form-label">Apellido</label>
        <input type="text" class="form-control" id="validationCustom02"  required th:field="*{apellidoC}">
        <div class="valid-feedback">
            ok!
        </div>
        <div class="invalid-feedback">
            Indica el Apellido
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationCustom03" class="form-label">Edad</label>
        <input type="number" class="form-control" id="validationCustom03"  required th:field="*{edad}">
        <div class="valid-feedback">
            ok!
        </div>
        <div class="invalid-feedback">
            Indica la Edad
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationCustom04" class="form-label">Dirección</label>
        <input type="text" class="form-control" id="validationCustom04"  required th:field="*{direccion}">
        <div class="valid-feedback">
            ok!
        </div>
        <div class="invalid-feedback">
            Indica la Dirección
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationCustom05" class="form-label">Teléfono</label>
        <input type="text" class="form-control" id="validationCustom05"  required th:field="*{telefono}">
        <div class="valid-feedback">
            ok!
        </div>
        <div class="invalid-feedback">
            Indica el Teléfono
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationCustom06" class="form-label">Email</label>
        <input type="email" class="form-control" id="validationCustom06"  required th:field="*{email}">
        <div class="valid-feedback">
            ok!
        </div>
        <div class="invalid-feedback">
            Indica el Email
        </div>
    </div>
    <div class="col-12">
        <button class="btn btn-primary" type="submit">Guardar Cliente</button>
    </div>
</form>

<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
    })()
</script>
</body>
</html>


//dependencias necesarias

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>